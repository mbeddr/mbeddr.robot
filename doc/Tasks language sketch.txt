resource PD4
resource PF5
resource multiplexer
	requires PD4 exclusive
resource timer
resource timer16bit
	provides timer
resource timer1
	provides timer16bit
resource counter
	parameter prescaler
	requires timer exclusive
resource ICP1
	requires multiplexer exclusive
	requires counter(timer = timer1) shared




instances RobotControlComponentInstances {
	@usesResource(PD4)
	instance AvrDigitalPin triggerPin
	
	@usesResource(PD4)
	instance MultiplexedPin echoPin
	
	@usesResource(counter[shared, timer = timer16bit, prescaler =< 64, prescaler >= 8])
	instance Counter counterComponent
	
	@usesResource(PD4)
	instance MultiplexedPin radioPin
	
	instance Buffer receiveBuffer;
}




task DistanceSensor {
	uint16 startTime;
	double distance;

	every [20 ms, 50 ms] {
		requires resource PD4, PF5, counter {
			do {
				triggerPin.setValue(false);
			}
			waitForEmission: wait
				until echoPin.getValue() == true
				check every [, 5 us]
				on timeout 1 ms -> reset
			do {
				triggerPin.setValue(true);
				startTime = counterComponent.getTimeUS()
			}
			waitForEcho: wait
				until echoPin.getValue() == false
				check every [, 5 us]
				on timeout 15 ms -> reset
			do {
				distance = (counter.getTimeUS() - startTime) * ...
			}
		}
	}
}

task RadioReceiver {
	uint8 data;
	uint8 bitsReceived;
	uint8 bytesReceived;
	
	measurementCycle: every [,500 ms] {
		requires PD4 {
			do {
				radioPin.asInput();
				bitsReceived = 0;
				bytesReceived = 0;
			}
			bitSampling: every [50 us, 50 us] do {
				data = (data << 1) & radioPin.getValue()?1:0;
				++bitsReceived;
				if (bitsReceived == 8) {
					receiveBuffer.write(data)
					bitsReceived = 0;
					++bytesReceived;
					if (bytesReceived == 200) {
						stop bitSampling;
					}
				}
			}
		}
	}
}

schedule {
	interrupt 5 us {
		call DistanceSensor(waitForEmission, waitForEcho)
		every 10th {
			execute RadioReceiver.bitSampling
		}
	}
	
	mainLoop {
		counter c1 (max >= 1000 ms, resolution <= 20 ms)
		
		execute measurementCycle
		
	}
}

